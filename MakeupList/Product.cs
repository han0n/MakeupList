using System;
using System.Collections.Generic;
using System.Text;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MakeupList;
//
//    var product = Product.FromJson(jsonString);

namespace MakeupList
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Product
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("brand")]
        public string Brand { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("price")]
        public string Price { get; set; }

        [JsonProperty("price_sign")]
        public object PriceSign { get; set; }

        [JsonProperty("currency")]
        public object Currency { get; set; }

        [JsonProperty("image_link")]
        public Uri ImageLink { get; set; }

        [JsonProperty("product_link")]
        public Uri ProductLink { get; set; }

        [JsonProperty("website_link")]
        public Uri WebsiteLink { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("rating")]
        public double? Rating { get; set; }

        [JsonProperty("category")]
        public string Category { get; set; }

        [JsonProperty("product_type")]
        public string ProductType { get; set; }

        [JsonProperty("tag_list")]
        public object[] TagList { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("updated_at")]
        public DateTimeOffset UpdatedAt { get; set; }

        [JsonProperty("product_api_url")]
        public Uri ProductApiUrl { get; set; }

        [JsonProperty("api_featured_image")]
        public string ApiFeaturedImage { get; set; }

        [JsonProperty("product_colors")]
        public ProductColor[] ProductColors { get; set; }
    }

    public partial class ProductColor
    {
        [JsonProperty("hex_value")]
        public string HexValue { get; set; }

        [JsonProperty("colour_name")]
        public string ColourName { get; set; }
    }

    public partial class Product
    {
        public static Product[] FromJson(string json) => JsonConvert.DeserializeObject<Product[]>(json, MakeupList.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Product[] self) => JsonConvert.SerializeObject(self, MakeupList.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
